@using FinancialTrackingSimulator.Model
@using FinancialTrackingSimulator.Components
@inject StockPriceService StockPriceService
@using ApexCharts

<div class="card">
    <ApexChart TItem="StockPricePoint" Title="@($"{SelectedStock} Performance Chart")" Options="ChartOptions">
        <ApexPointSeries TItem="StockPricePoint" Items="StockData" Name="Price" SeriesType="SeriesType.Line"
                         XValue="e => e.Timestamp" YValue="e => e.Price" />
    </ApexChart>
</div>

@code {
    [Parameter]
    public string SelectedStock { get; set; } // Dynamically set from the parent component/page
    private List<StockPricePoint> StockData { get; set; } = new();
    private ApexChartOptions<StockPricePoint> ChartOptions;

    protected override async Task OnInitializedAsync()
    {
        // Load historical data for the selected stock
        StockData = await StockPriceService.GetHistoricalPricesAsync(SelectedStock);

        // Configure the chart options
        ChartOptions = new ApexChartOptions<StockPricePoint>
            {
                Stroke = new Stroke
                {
                    Colors = new List<string> { "#208454" } // Green line color
                },
                Xaxis = new XAxis
                {
                    Labels = new XAxisLabels
                    {
                        // Format timestamps to "dd MMM yyyy HH:mm" (e.g., "10 Dec 2024 13:09")
                        Formatter = "function(val) { return new Date(val).toLocaleString('en-GB', { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' }); }"
                    }
                },
                Yaxis = new List<YAxis>
            {
                new YAxis
                {
                    Labels = new YAxisLabels
                    {
                        Formatter = "function(val) { return val.toFixed(2); }" // Format values to 2 decimal places
                    }
                }
            }
            };

        // Subscribe to live updates
        StockPriceService.StockUpdated += OnStockPriceUpdated;
    }

    private void OnStockPriceUpdated(Stock stock)
    {
        if (stock.Name == SelectedStock)
        {
            // Add the new data point
            StockData.Add(new StockPricePoint { Timestamp = DateTime.Now, Price = stock.Price });

            // Keep only the last 50 points to avoid clutter
            if (StockData.Count > 50)
            {
                StockData.RemoveAt(0);
            }

            // Refresh the UI
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        // Unsubscribe from events when the component is disposed
        StockPriceService.StockUpdated -= OnStockPriceUpdated;
    }
}