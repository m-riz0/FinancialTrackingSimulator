@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using FinancialTrackingSimulator.Components.Account.Shared
@using FinancialTrackingSimulator.Model
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<body style="background-color:#323a56">
<PageTitle>Register</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

<EditForm OnValidSubmit="RegisterUser" Model="Model" FormName="registerForm">
    <DataAnnotationsValidator />

        <div class="container">
            <div class="row justify-content-center mt-5">
                <div class="col-md-6">
                    <div class="card" style="border: 2px solid #626980;">
                        <div class="card-body" style="background-color:#626980">
                            <h4 class="card-title text-center">Register</h4>
                                <div class="mb-3">
                                    <label for="email">Email</label>
                                    <InputText id="email" class="form-control" placeholder="you@example.com" @bind-Value="Model.Email" />
                                    <div class="small">
                                        <ValidationMessage For="@(() => Model!.Email)" />
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="password">Password</label>
                                    <InputText id="password" type="password" class="form-control" placeholder="Password" @bind-Value="Model.Password" />
                                    <div class="small">
                                        <ValidationMessage For="@(() => Model!.Password)" />
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="confirm">Confirm Password</label>
                                    <InputText id="confirm" type="password" class="form-control" placeholder="Confirm Password" @bind-Value="Model.ConfirmPassword" />
                                    <div class="small">
                                        <ValidationMessage For="@(() => Model!.ConfirmPassword)" />
                                    </div>
                                </div>
                                <div class="d-grid gap-2 mb-3">
                                    <button type="submit" class="btn btn-success">Register</button>
                                </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</body>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private RegisterModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? statusMessage => identityErrors is null ? null : string.Join(" ", identityErrors.Select(error => error.Description));
    private bool isError;

    public async Task RegisterUser(EditContext editContext)
    {
        var user = new User
            {
                Email = Model.Email,
            };

        var result = await UserManager.CreateAsync(user, Model.Password);
        await UserManager.AddToRoleAsync(user, "Customer");

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            isError = true;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class RegisterModel
    {
        [Required(ErrorMessage = "Please enter your email.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Please enter a password.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password.")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
