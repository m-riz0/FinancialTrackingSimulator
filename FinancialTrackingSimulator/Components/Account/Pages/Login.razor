@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using FinancialTrackingSimulator.Components.Account.Shared
@using FinancialTrackingSimulator.Model
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<body style="background-color:#323a56">
    <PageTitle>Log in</PageTitle>
    <StatusMessage Message="@statusMessage" IsError="@isError" />

    <div class="container">
        <div class="row justify-content-center mt-5">
            <div class="col-md-6">
                <div class="card" style="border: 2px solid #626980">
                    <div class="card-body" style="background-color:#626980">
                        <h4 class="card-title text-center">Login</h4>
                        <EditForm OnValidSubmit="LoginUser" Model="Model" FormName="loginForm">
                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText @bind-Value="Model.Email" class="form-control" placeholder="name@example.com" />
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <InputText type="password" @bind-Value="Model.Password" class="form-control" placeholder="Password" />
                            </div>
                            <div class="d-grid gap-2 mb-3">
                                <button type="submit" class="btn btn-success">Login</button>
                            </div>
                            <div class="d-grid gap-2 mb-3">
                                <a href="@(NavigationManager.ToAbsoluteUri("Account/Register"))" class="btn btn-danger">Don't have an account? Register</a>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

@code {
    // Handles user login, capturing user input, validating credentials, and redirecting on success
    private string? statusMessage;
    private bool isError;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    // Holds the login form data (email and password)
    [SupplyParameterFromForm]
    private LoginModel Model { get; set; } = new();

    // URL to redirect to after login, if specified in the query
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    // Clears any existing login cookies on page load to ensure a clean login process
    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Sign out from any existing session to start a fresh login
            await HttpContext.SignOutAsync(IdentityConstants.ApplicationScheme);
        }
    }

    // Attempts to log in the user with the provided credentials, handling success and error states
    public async Task LoginUser()
    {
        // Initiates password verification
        var result = await SignInManager.PasswordSignInAsync(Model.Email, Model.Password, false, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            // User is logged in if the credentials are correct
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            // Set error message and flag if login attempt fails
            statusMessage = "Invalid login attempt.";
            isError = true;
        }
    }

    // Defines the data fields for the login form, with validation for email and password inputs
    private sealed class LoginModel
    {
        public string Email { get; set; } = "";

        public string Password { get; set; } = "";
    }
}


