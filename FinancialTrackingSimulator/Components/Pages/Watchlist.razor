@page "/watchlist"
@using FinancialTrackingSimulator.Context
@using FinancialTrackingSimulator.Model
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@inject WatchlistProvider WatchlistProvider
@inject DatabaseContext DbContext
@inject StockPriceService StockPriceService
@inject NavigationManager NavigationManager

<PageTitle>Watchlist</PageTitle>

<body style="background-color:#323a56">
    <h3 style="color: white">Watchlist</h3>

    <!-- Search bar to search for stocks in the StockPriceService -->
    <input type="text" @oninput="UpdateSearchTerm" placeholder="Search stocks to add..." class="form-control" style="margin-bottom: 20px;" />

    <!-- Display search results from StockPriceService -->
    @if (searchedStocks != null && searchedStocks.Any())
    {
        <table class="table" style="color: white">
            <tbody>
                @foreach (var stock in searchedStocks)
                {
                    <tr>
                        <td>@stock.Name</td>
                        <td>@($"${stock.Price:F2}")</td>
                        <td>
                            <button class="btn btn-success" @onclick="() => AddToWatchlist(stock)">Add to Watchlist</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <!-- Watchlist Table -->
    @if (watchlistStocks == null || !watchlistStocks.Any())
    {
        <p style="color: white">Your watchlist is currently empty. Add stocks to track their prices.</p>
    }
    else
    {
        <table class="table table-striped" style="color: white">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Daily Change</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var stock in pagedWatchlistStocks)
                {
                    <tr>
                        <td>@stock.Name</td>
                        <td>@($"${stock.Price:F2}")</td>
                        <td style="color:@(stock.DailyChange >= 0 ? "green" : "red")">
                            @(stock.DailyChange >= 0 ? "+" : "")@stock.DailyChange%
                        </td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => RemoveFromWatchlist(stock)">Remove</button>
                            <button class="btn btn-primary" @onclick="() => NavigateToStockInfo(stock.Id)">View</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</body>

@code {
    private List<Stock> watchlistStocks = new List<Stock>();
    private List<Stock> pagedWatchlistStocks = new List<Stock>();
    private List<Stock> searchedStocks = new List<Stock>(); // Initialize to prevent null references
    private string searchTerm = string.Empty;

    // Pagination variables
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)watchlistStocks.Count / pageSize);

    private bool CanGoNext => currentPage < totalPages;
    private bool CanGoPrevious => currentPage > 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadWatchlistAsync();
        StockPriceService.OnPricesUpdated += RefreshUI;
    }

    private void UpdatePagedWatchlist()
    {
        pagedWatchlistStocks = watchlistStocks
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            currentPage++;
            UpdatePagedWatchlist();
        }
    }

    private void PreviousPage()
    {
        if (CanGoPrevious)
        {
            currentPage--;
            UpdatePagedWatchlist();
        }
    }

    private async Task AddToWatchlist(Stock stock)
    {
        await WatchlistProvider.AddStockToWatchlistAsync(stock);
        await LoadWatchlistAsync();  // Refresh the watchlist after adding a stock
    }

    private async Task LoadWatchlistAsync()
    {
        watchlistStocks = await WatchlistProvider.GetAllWatchlistStocksAsync();
        UpdatePagedWatchlist();  // Refresh the pagination
        InvokeAsync(StateHasChanged);  // Update the UI
    }

    private async Task RemoveFromWatchlist(Stock stock)
    {
        await WatchlistProvider.RemoveStockFromWatchlistAsync(stock.Id);
        await LoadWatchlistAsync();  // Refresh the watchlist after removing a stock
    }

    private void RefreshUI()
    {
        SearchStocks();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateSearchTerm(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        SearchStocks();
    }

    private void SearchStocks()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            searchedStocks = StockPriceService.GetAllStocks()
                .Where(s => s.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            searchedStocks = new List<Stock>(); // Clear search results
        }

        InvokeAsync(StateHasChanged);  // Ensure the UI updates
    }

    private void NavigateToStockInfo(int stockId)
    {
        NavigationManager.NavigateTo($"/stockinformation/{stockId}");
    }

    public void Dispose()
    {
        StockPriceService.OnPricesUpdated -= RefreshUI;
    }
}