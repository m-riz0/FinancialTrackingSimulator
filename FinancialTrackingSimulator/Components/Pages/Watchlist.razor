@page "/watchlist"
@using FinancialTrackingSimulator.Context
@using FinancialTrackingSimulator.Model
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@attribute [Authorize]
@inject StockPriceService StockPriceService
@inject NavigationManager NavigationManager
@inject DatabaseContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Watchlist</PageTitle>

<body style="background-color:#323a56">
    <h3 style="color: white">Watchlist</h3>

    <!-- Search bar to search for stocks in the StockPriceService -->
    <input type="text" @oninput="UpdateSearchTerm" placeholder="Search stocks to add..." class="form-control" style="margin-bottom: 20px;" />

    <!-- Display search results from StockPriceService -->
    @if (searchedStocks != null && searchedStocks.Any())
    {
        <table class="table" style="color: white">
            <tbody>
                @foreach (var stock in searchedStocks)
                {
                    <tr>
                        <td>@stock.Name</td>
                        <td>@($"${stock.Price:F2}")</td>
                        <td>
                            <!-- Passing stock to AddStock component -->
                            <Shared.AddStock StockToAdd="stock" UserWatchlist="userWatchlist" OnStockAdded="HandleStockAdded">
                                <button class="btn btn-success">Add to Watchlist</button>
                            </Shared.AddStock>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <!-- Watchlist Table -->
    @if (watchlistStocks == null || !watchlistStocks.Any())
    {
        <p style="color: white">Your watchlist is currently empty. Add stocks to track their prices.</p>
    }
    else
    {
        <table class="table table-striped" style="color: white">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Daily Change</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var stock in pagedWatchlistStocks)
                {
                    <tr>
                        <td>@stock.Name</td>
                        <td>@($"${stock.Price:F2}")</td>
                        <td style="color:@(stock.DailyChange >= 0 ? "green" : "red")">
                            @(stock.DailyChange >= 0 ? "+" : "")@stock.DailyChange%
                        </td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => RemoveFromWatchlist(stock)">Remove</button>
                            <button class="btn btn-primary" @onclick="() => NavigateToStockInfo(stock.Id)">View</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination Controls -->
        <div class="pagination-container">
            <button @onclick="PreviousPage" disabled="@(!CanGoPrevious)" class="btn btn-primary">Previous</button>
            <span style="color: white; margin: 0 15px;">Page @currentPage of @totalPages</span>
            <button @onclick="NextPage" disabled="@(!CanGoNext)" class="btn btn-primary">Next</button>
        </div>
    }
</body>

@code {
    private Model.Watchlist userWatchlist;
    private List<Stock> watchlistStocks = new List<Stock>();
    private List<Stock> pagedWatchlistStocks = new List<Stock>();
    private List<Stock> searchedStocks;
    private string searchTerm = string.Empty;

    // Pagination variables
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)watchlistStocks.Count / pageSize);

    protected override async Task OnInitializedAsync()
    {
        // Load user's watchlist
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User?.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        
        if (userId != null)
        {
            userWatchlist = await DbContext.Watchlists.Include(w => w.Stocks).FirstOrDefaultAsync(w => w.User.Id == userId);
            if (userWatchlist != null)
            {
                watchlistStocks = userWatchlist.Stocks.ToList();
                UpdatePagedWatchlist();
            }
        }

        // Subscribe to stock price updates
        StockPriceService.OnPricesUpdated += RefreshUI;
    }

    private void RefreshUI()
    {
        // Reapply filters for search and watchlist when prices update
        SearchStocks();
        UpdatePagedWatchlist();
        InvokeAsync(StateHasChanged); // Ensure UI updates correctly
    }

    public void Dispose()
    {
        // Unsubscribe from event to avoid memory leaks
        StockPriceService.OnPricesUpdated -= RefreshUI;
    }

    // Update the pagedWatchlistStocks based on the current page
    private void UpdatePagedWatchlist()
    {
        pagedWatchlistStocks = watchlistStocks
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void NextPage()
    {
        if (CanGoNext)
        {
            currentPage++;
            UpdatePagedWatchlist();
        }
    }

    private void PreviousPage()
    {
        if (CanGoPrevious)
        {
            currentPage--;
            UpdatePagedWatchlist();
        }
    }

    private bool CanGoNext => currentPage < totalPages;
    private bool CanGoPrevious => currentPage > 1;

    // Search for stocks in the StockPriceService
    private void UpdateSearchTerm(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        SearchStocks();
    }

    private void SearchStocks()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            searchedStocks = StockPriceService.GetAllStocks()
                .Where(s => s.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            searchedStocks = null; // Clear search results if the search term is empty
        }
    }

    private async Task HandleStockAdded()
    {
        // Reload watchlist and update the UI after a stock is added
        watchlistStocks = userWatchlist.Stocks.ToList();
        UpdatePagedWatchlist();
        await InvokeAsync(StateHasChanged);
    }

    // Remove a stock from the user's watchlist
    private void RemoveFromWatchlist(Stock stock)
    {
        watchlistStocks.Remove(stock);
        UpdatePagedWatchlist();
    }

    // Navigate to the stock information page based on the stock's Id
    private void NavigateToStockInfo(int stockId)
    {
        NavigationManager.NavigateTo($"/stockinformation/{stockId}");
    }
}
