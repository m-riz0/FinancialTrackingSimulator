@page "/stockinformation/{id:int}"
@using FinancialTrackingSimulator.Context
@using FinancialTrackingSimulator.Model
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using FinancialTrackingSimulator.Components.Shared
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject WatchlistProvider WatchlistProvider
@inject DatabaseContext DbContext
@inject StockPriceService StockPriceService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Stock Information</PageTitle>

<body style="background-color:#323a56; color: white; font-family: Arial, sans-serif;">
    <div style="max-width: 1200px; margin: 0 auto; padding: 20px;">
        <h3>Stock Information</h3>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div style="background-color: grey; color: white; padding: 10px; margin-top: 20px; margin-bottom: 20px; border-radius: 5px;">
                @successMessage
            </div>
        }

        @if (stock != null)
        {
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <!-- Stock Name and Price Badge -->
                <div>
                    <h4 style="font-size: 28px;">@stock.Name</h4>
                    <div style="display: flex; align-items: center;">
                        <!-- Price Badge with same color as View button -->
                        <span style="background-color: #106cfc; margin-right: 15px; padding: 10px 15px; border-radius: 5px; font-size: 18px; color: white; line-height: 1.5;">
                            $@stock.Price.ToString("F2")
                        </span>
                        <!-- Daily Change Badge next to the Price -->
                        <span style="background-color: @GetChangeColor(stock.DailyChange); padding: 10px 15px; border-radius: 5px; font-size: 18px; color: white; line-height: 1.5;">
                            @stock.DailyChange%
                        </span>
                    </div>
                </div>

                <!-- Add to Portfolio / Add to Watchlist Buttons -->
                <div style="display: flex; gap: 15px; align-items: center; margin-top: 35px;">
                    <button class="btn btn-success" style="color: white; padding: 10px 15px; border-radius: 5px; font-size: 18px; border: none; line-height: 1.5;">
                        Add to Portfolio
                    </button>
                    <button class="btn btn-success" style="color: white; padding: 10px 15px; border-radius: 5px; font-size: 18px; border: none; line-height: 1.5;" @onclick="AddToWatchlist">
                        Add to Watchlist
                    </button>
                </div>
            </div>

            <!-- Stock Graph Section -->
            <div style="margin-top: 20px;">
                <h5>Graph</h5>
            <div style="background-color: #626980; padding: 20px; border-radius: 5px; height: 750px;">
                <StockGraph />
            </div>
            </div>

            <!-- Stock Information Section -->
            <div style="margin-top: 20px;">
                <h5>Details</h5>
                <div style="background-color: #626980; color: black; padding: 20px; margin-top: 10px; border-radius: 5px;">
                    <p>@stock.OtherInformation</p>
                </div>
            </div>

            <!-- Recommended Stocks Section -->
            <div style="margin-top: 20px;">
                <h5>Recommended Stocks</h5>
                <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px;">
                    @foreach (var recommendedStock in recommendedStocks)
                    {
                        <div style="background-color: #626980; color: black; padding: 10px; border-radius: 5px; display: flex; flex-direction: column; justify-content: space-between; min-height: 200px;">
                            <p><strong>@recommendedStock.Name</strong></p>

                            <!-- Price Badge -->
                            <p style="color: black; margin: 0;">
                                Price:
                                <span style="background-color: #106cfc; padding: 5px 10px; border-radius: 5px; color: white;">
                                    $@recommendedStock.Price.ToString("F2")
                                </span>
                            </p>
                            <p></p>

                            <!-- Daily Change Badge -->
                            <p style="color: black; margin: 0;">
                                Daily Change:
                                <span style="background-color: @GetChangeColor(recommendedStock.DailyChange); padding: 5px 10px; border-radius: 5px; color: white;">
                                    @recommendedStock.DailyChange%
                                </span>
                            </p>

                            <!-- View Button at Bottom -->
                            <button class="btn btn-primary" @onclick="() => NavigateToStock(recommendedStock.Id)" style="color: white; border: none; padding: 10px; border-radius: 5px; margin-top: auto;">
                                View
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <p>No stock found for that ID</p>
        }
    </div>
</body>

@code {
    [Parameter]
    public int Id { get; set; }

    private Stock stock;
    private List<Stock> recommendedStocks = new List<Stock>();
    private string successMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadStockData();
        SubscribeToStockUpdates();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadStockData();
        SubscribeToStockUpdates();
    }

    private async Task LoadStockData()
    {
        // Fetch the main stock
        stock = await DbContext.Stocks.FirstOrDefaultAsync(s => s.Id == Id);

        // Fetch all stocks (excluding the current one) and randomize the selection in memory
        var allStocks = await DbContext.Stocks
            .Where(s => s.Id != Id)
            .ToListAsync();

        // Select 4 random stocks in memory
        recommendedStocks = allStocks.OrderBy(s => Guid.NewGuid()).Take(4).ToList();
    }

    private void SubscribeToStockUpdates()
    {
        // Unsubscribe first to prevent multiple subscriptions
        StockPriceService.StockUpdated -= OnStockUpdated;
        // Subscribe to the event
        StockPriceService.StockUpdated += OnStockUpdated;
    }

    private async Task AddToWatchlist()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var username = authState.User?.Identity?.Name;
            var user = await DbContext.Users.FirstOrDefaultAsync(u => u.UserName == username);

            if (user != null && stock != null)
            {
                var watchlist = await WatchlistProvider.GetAllWatchlistStocksAsync();
                var existingStock = watchlist.FirstOrDefault(s => s.Id == stock.Id);

                if (existingStock == null)
                {
                    await WatchlistProvider.AddStockToWatchlistAsync(stock, user);
                    successMessage = $"{stock.Name} has been added to your watchlist.";
                }
                else
                {
                    successMessage = $"{stock.Name} is already in your watchlist.";
                }
                InvokeAsync(StateHasChanged); // Update UI immediately
                _ = ClearSuccessMessageAfterDelay(); // Start timer to clear the message
            }
            else
            {
                Console.WriteLine("Error: User or stock not found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding stock to watchlist: {ex.Message}");
        }
    }

    private async Task ClearSuccessMessageAfterDelay()
    {
        await Task.Delay(3000); // 3-second delay
        successMessage = null;
        InvokeAsync(StateHasChanged); // Clear message in UI
    }

    private void OnStockUpdated(Stock updatedStock)
    {
        // Update the main stock if it's the one being viewed
        if (updatedStock.Id == stock.Id)
        {
            stock.Price = updatedStock.Price;
            stock.DailyChange = updatedStock.DailyChange;
        }

        // Update recommended stocks if applicable
        var recommended = recommendedStocks.FirstOrDefault(s => s.Id == updatedStock.Id);
        if (recommended != null)
        {
            recommended.Price = updatedStock.Price;
            recommended.DailyChange = updatedStock.DailyChange;
        }

        // Trigger re-render to reflect updated prices
        InvokeAsync(StateHasChanged);
    }

    // Clean up event subscription when the component is disposed
    public void Dispose()
    {
        StockPriceService.StockUpdated -= OnStockUpdated;
    }

    // Helper method to get color based on daily change (positive or negative)
    private string GetChangeColor(decimal dailyChange)
    {
        return dailyChange >= 0 ? "#208454" : "#e03444"; // Green for positive, red for negative
    }

    // Navigate to the stock information page of the selected stock
    private void NavigateToStock(int stockId)
    {
        NavigationManager.NavigateTo($"/stockinformation/{stockId}");
    }
}
