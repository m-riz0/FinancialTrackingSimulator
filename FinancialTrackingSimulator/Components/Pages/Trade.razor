@page "/trade"
@using FinancialTrackingSimulator.Context
@using FinancialTrackingSimulator.Model
@using Microsoft.AspNetCore.Authorization
@using FinancialTrackingSimulator.Components.Shared
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject StockPriceService StockPriceService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PortfolioProvider PortfolioProvider
@inject DatabaseContext DbContext

<PageTitle>Trade</PageTitle>

<body style="background-color:#323a56">
    <h3 style="color: white">Trade</h3>

    <!-- Displays a message at the top of the page if a user adds something to their Portfolio -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div style="background-color: grey; color: white; padding: 10px; margin-top: 20px; margin-bottom: 20px; border-radius: 5px;">
            @successMessage
        </div>
    }

    <!-- Search bar for filtering stocks by name -->
    <input type="text" @oninput="UpdateSearchTerm" placeholder="Search stocks..." class="form-control" style="margin-bottom: 20px;" />

    @if (pagedStocks == null)
    {
        <p style="color: white">Loading stocks...</p>
    }
    else if (!pagedStocks.Any())
    {
        <p style="color: white">No stocks match your search.</p>
    }
    else
    {
        <!-- Display stocks in a paginated table -->
        <table class="table table-striped" style="color: white">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Daily Change</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var stock in pagedStocks)
                {
                    <tr>
                        <td>@stock.Name</td>
                        <td>@($"${stock.Price:F2}")</td>
                        <td style="color:@(stock.DailyChange >= 0 ? "green" : "red")">
                            @(stock.DailyChange >= 0 ? "+" : "")@stock.DailyChange%
                        </td>
                        <td>
                            <!-- Action buttons for each stock -->
                            <button class="btn btn-success" @onclick="() => AddToPortfolio(stock)">Add Stock</button>
                            <button class="btn btn-danger" @onclick="() => OpenPredictionPopup(stock)">Performance Prediction</button>
                            <button class="btn btn-primary" @onclick="() => NavigateToStockInfo(stock.Id)">View</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination controls to navigate through pages -->
        <div class="pagination-container">
            <button @onclick="PreviousPage" disabled="@(!CanGoPrevious)" class="btn btn-primary">Previous</button>
            <span style="color: white; margin: 0 15px;">Page @currentPage of @totalPages</span>
            <button @onclick="NextPage" disabled="@(!CanGoNext)" class="btn btn-primary">Next</button>
        </div>
    }

    <!-- Popup for stock performance prediction -->
    @if (showPredictionPopup)
    {
        <div class="modal show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Performance Prediction for @selectedStock?.Name</h5>
                    </div>
                    <div class="modal-body">
                        <p><strong>Current Price:</strong> @($"{selectedStock?.Price:C}")</p>
                        <p>
                            <strong>Daily Change:</strong> <span style="color:@(selectedStock?.DailyChange >= 0 ? "green" : "red")">
                                @(selectedStock?.DailyChange >= 0 ? "+" : "")@selectedStock?.DailyChange%
                            </span>
                        </p>

                        <p>Would you like to predict if the value of this stock will rise or fall? (Note: The prediction is not always accurate.)</p>
                        <p>(If the value of the stock updates, press the 'Predict' button again to re-predict its performance.)</p>
                        @if (predictionResult != null)
                        {
                            <p><strong>Prediction:</strong> The stock value is expected to <strong>@predictionResult</strong>.</p>
                        }
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" @onclick="MakePrediction">Predict</button>
                        <button class="btn btn-danger" @onclick="ClosePredictionPopup">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }
</body>

@code {
    private List<Stock> pagedStocks;
    private Stock stock;
    private string searchTerm = string.Empty;
    private Stock selectedStock;
    private bool showPredictionPopup = false;
    private string predictionResult;
    private string successMessage;

    // Pagination variables to control current page, items per page, and total pages
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)filteredStocks.Count / pageSize);

    private List<Stock> stocks;
    private List<Stock> filteredStocks;

    protected override void OnInitialized()
    {
        // Initialize stocks, filteredStocks, and set up real-time updates
        stocks = StockPriceService.GetAllStocks();
        filteredStocks = stocks;
        UpdatePagedStocks();
        StockPriceService.OnPricesUpdated += RefreshUI;
        StockPriceService.StockUpdated += OnStockUpdated;
    }

    private void RefreshUI()
    {
        // Refresh the UI by filtering and updating the paginated stock list
        FilterStocks();
        UpdatePagedStocks();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Unsubscribe from real-time updates upon component disposal
        StockPriceService.OnPricesUpdated -= RefreshUI;
    }

    private void UpdateSearchTerm(ChangeEventArgs e)
    {
        // Update search term based on input, reset to first page, and filter stocks
        searchTerm = e.Value.ToString();
        FilterStocks();
        currentPage = 1;
        UpdatePagedStocks();
    }

    private void FilterStocks()
    {
        // Filter stocks based on search term, displaying matching stocks
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredStocks = stocks;
        }
        else
        {
            filteredStocks = stocks
                .Where(s => s.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void UpdatePagedStocks()
    {
        // Update pagedStocks to show only stocks for the current page
        pagedStocks = filteredStocks
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void NextPage()
    {
        // Navigate to the next page if possible and update paged stocks
        if (CanGoNext)
        {
            currentPage++;
            UpdatePagedStocks();
        }
    }

    private void PreviousPage()
    {
        // Navigate to the previous page if possible and update paged stocks
        if (CanGoPrevious)
        {
            currentPage--;
            UpdatePagedStocks();
        }
    }

    private bool CanGoNext => currentPage < totalPages; // Check if next page is available
    private bool CanGoPrevious => currentPage > 1; // Check if previous page is available

    private void NavigateToStockInfo(int stockId)
    {
        // Navigate to the Stock Information page
        NavigationManager.NavigateTo($"/stockinformation/{stockId}");
    }

    private void OnStockUpdated(Stock updatedStock)
    {
        // Update selected stock's data if modified
        if (selectedStock != null && selectedStock.Id == updatedStock.Id)
        {
            selectedStock = updatedStock;
            InvokeAsync(StateHasChanged);
        }
    }

    private void OpenPredictionPopup(Stock stock)
    {
        // Open the prediction popup for the selected stock
        selectedStock = stock;
        showPredictionPopup = true;
        predictionResult = null;
    }

    private void ClosePredictionPopup()
    {
        // Close the prediction popup
        showPredictionPopup = false;
        selectedStock = null;
    }

    private void MakePrediction()
    {
        // Generate a prediction for the selected stock's performance
        predictionResult = StockPriceService.PredictStockTrend(selectedStock);
    }

    private async Task AddToPortfolio(Stock stock)
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var username = authState.User?.Identity?.Name;
            var user = await DbContext.Users.FirstOrDefaultAsync(u => u.UserName == username);

            if (user != null && stock != null)
            {
                // Fetch portfolio stocks
                var portfolio = await PortfolioProvider.GetAllPortfolioStocksAsync();
                var existingStock = portfolio.FirstOrDefault(s => s.Id == stock.Id);

                if (existingStock == null)
                {
                    // Add stock to portfolio with default Quantity
                    await PortfolioProvider.AddStockToPortfolioAsync(stock, user);
                    successMessage = $"{stock.Name} has been added to your portfolio. Go to Portfolio page to edit the addition.";
                }
                else
                {
                    successMessage = $"{stock.Name} is already in your portfolio.";
                }
                InvokeAsync(StateHasChanged); // Update UI immediately
                _ = ClearSuccessMessageAfterDelay(); // Start timer to clear the message
            }
            else
            {
                Console.WriteLine("Error: User or stock not found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding stock to portfolio: {ex.Message}");
        }
    }


    private async Task ClearSuccessMessageAfterDelay()
    {
        await Task.Delay(3000); // 3-second delay
        successMessage = null;
        InvokeAsync(StateHasChanged); // Clear message in UI
    }
}
